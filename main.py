import asyncio
import os
import re
from datetime import datetime, time
from dotenv import load_dotenv
from pyrogram import Client, filters

load_dotenv()

API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")

async def choose_reaction():
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏:")
    print("1. ‚ù§Ô∏è")
    print("2. üëç") 
    print("3. üî•")
    print("4. üëè")
    print("5. üí©")
    print("6. üéâ")
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —ç–º–æ–¥–∑–∏ (1-6): ")
    reactions = {"1": "‚ù§Ô∏è", "2": "üëç", "3": "üî•", "4": "üëè", "5": "üí©", "6": "üéâ"}
    return reactions.get(choice, "‚ù§Ô∏è")

async def main():
    print("\n–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    async with Client("my_account", API_ID, API_HASH) as app:
        me = await app.get_me()
        print(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫: {me.first_name} (@{me.username})")
        
        dialogs = []
        print("\n–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø...")
        async for dialog in app.get_dialogs():
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ª–æ–≥–∞: {dialog.chat.type} - {getattr(dialog.chat, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            if str(dialog.chat.type) == "ChatType.SUPERGROUP": 
                dialogs.append(dialog)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞: {dialog.chat.title}")
                
        print(f"\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø: {len(dialogs)}")
        
        if not dialogs:
            print("\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø.")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
            print("1. –í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–π —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ")
            print("2. –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–∏–º –≥—Ä—É–ø–ø–∞–º")
            print("3. –ì—Ä—É–ø–ø—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è—é—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞–º–∏ (–æ–±—ã—á–Ω–æ –±–æ–ª—å—à–∏–µ –≥—Ä—É–ø–ø—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞–º–∏)")
            return
            
        print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã ({len(dialogs)}):")
        for i, dialog in enumerate(dialogs, 1):
            chat_type = {
                "private": "–õ–∏—á–Ω—ã–π —á–∞—Ç",
                "group": "–ì—Ä—É–ø–ø–∞",
                "supergroup": "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞",
                "channel": "–ö–∞–Ω–∞–ª"
            }.get(dialog.chat.type, dialog.chat.type)
            
            print(f"{i}. {dialog.chat.title or dialog.chat.first_name} [{chat_type}]")
        
        while True:
            try:
                group_index = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞: ")) - 1
                if 0 <= group_index < len(dialogs):
                    break
                print(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(dialogs)}")
            except ValueError:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        
        selected_chat = dialogs[group_index].chat.id
        
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
        print("1. –õ–∞–π–∫–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("2. –õ–∞–π–∫–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
        print("3. –õ–∞–π–∫–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
        
        mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3): ")
        reaction = await choose_reaction()
        
        if mode == "1":
            user_id = input("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @): ")
            
            @app.on_message(filters.chat(selected_chat) & filters.user(user_id))
            async def like_user_messages(client, message):
                await message.react(reaction)
                print(f"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è {reaction} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}")
                
        elif mode == "2":
            start_time = input("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ß–ß:–ú–ú): ")
            end_time = input("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ß–ß:–ú–ú): ")
            start_h, start_m = map(int, start_time.split(":"))
            end_h, end_m = map(int, end_time.split(":"))
            
            @app.on_message(filters.chat(selected_chat))
            async def like_time_messages(client, message):
                current_time = datetime.now().time()
                start = time(start_h, start_m)
                end = time(end_h, end_m)
                
                if start <= current_time <= end:
                    await message.react(reaction)
                    
        elif mode == "3":
            keyword = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞: ")
            
            @app.on_message(filters.chat(selected_chat))
            async def like_keyword_messages(client, message):
                if message.text and re.search(keyword, message.text, re.IGNORECASE):
                    await message.react(reaction)
        
        print("\n–ê–≤—Ç–æ-–ª–∞–π–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            print("\n–†–∞–±–æ—Ç–∞ –∞–≤—Ç–æ–ª–∞–π–∫–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

asyncio.run(main())